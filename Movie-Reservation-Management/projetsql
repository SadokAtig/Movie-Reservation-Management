create table individu(
numindividue number(8) primary key,
nomindividu varchar(50) not null,
prenomindividu varchar(50) not null);
CREATE TABLE film(
numfilm number(8) primary key,
titre varchar(50) not null,
realisateur number(8)references individu(numindividue));

create table exemplaire(
numexemplaire number(8) primary key,
numfilm number(8)references film(numfilm),
codesupport varchar(8) not null,
vo varchar(8),
probleme varchar(1000),
detailsupport varchar(1000));
create table client_p(
login varchar(30) primary key,
nomclient varchar(50) not null,
prenomclient varchar(50) not null,
motdepasse varchar(20),
adresse varchar(70));
create table location_p(
numexemplaire number(8) references exemplaire(numexemplaire),
datelocation date,
login varchar(30) references client_p(login),
dateenvoi date not null,
dateretour date not null,
primary key(numexemplaire,datelocation));
/*insertion film*/
insert into film values(100,'harry_potter',11);
insert into film values(101,'harry_potter2',12);
insert into film values(102,'harry_potter3',13);
insert into film values(103,'harry_potter4',14);
insert into film values(104,'v_for_vendetta',1091);
insert into film values(105,'v_for_vendetta',1091);
insert into film values(106,'v_for_vendetta',1091);
insert into film values(107,'v_for_vendetta',1091);
insert into film values(108,'silence_of_the_lambs',11);
/*insertion individu*/
insert into individu  values(11,'saif eddine','benarfa');
insert into individu  values(12,'sadok','atig');
insert into individu  values(13,'yasmine','mejry');
insert into individu values(14,'malek','benslama');
insert into individu values(1091,'malek','benslama');
/*insertion exemplaire*/
insert into exemplaire values(1,100,123,'DVD','empty','dts');
insert into exemplaire values(2,101,124,'DVD','empty','dts');
insert into exemplaire values(3,102,125,'DVD','empty','dts');
insert into exemplaire values(4,103,126,'DVD','empty','dts');
insert into exemplaire values(5,104,127,'VHS','empty','dts');
insert into exemplaire values(6,103,128,'VHS','empty','dts');
insert into exemplaire values(7,103,129,'VHS','FALSE','dts');
/*insertion client*/
insert into client_p values('siisko','saif','benarfa','admis1','mahdia');
insert into client_p values('sadok','sadek','atig','admis2','manouba');
insert into client_p values('yass','yassmine','mejry','admise3','hamlenf');
insert into client_p values('angel','malek','benslama','admise4','denden');
insert into client_p values('chibou','chiheb','bouha','admise5','denden');
insert into client_p values('baz','zbak','amin','admise6','denden');
insert into client_p values('chkala','boussadi','badi','admise7','denden');
insert into client_p values('kimo','karim','adly','admise8','naser');
insert into client_p values('bouda','ferr','oubaid','admise9','arianna');
insert into client_p values('kaboura','aribi','dalel','admise9','manzah6');
insert into client_p values('patata','mimi','rafik','admise10','manzah5');
insert into client_p values('nos','hamemi','anous','admise11','manouba');
insert into client_p values('pika','atig','pika','admise12','manouba');
insert into client_p values('tchou','khayati','ahmed','admis13','denden');
insert into client_p values('dren','abidi','dhker','admis14','denden');
/*insertion location*/
insert into location_p values(4,'15/11/2021','angel','15/11/2021','30/12/2021');
insert into location_p values (1,'25/09/2020','sadok','25/09/2020','25/10/2020');
insert into location_p values (2,'26/09/2021','yas','26/09/2021','26/10/2022');
insert into location_p values (1,'8/09/2022','chibou','8/09/2022','10/9/2022');
insert into location_p values (2,'10/09/2022','baz','10/09/2022','27/9/2022');
insert into location_p values (3,'11/09/2022','kimo','11/09/2022','15/9/2022');
insert into location_p values (3,'12/09/2022','chkala','12/09/2022','18/9/2022');
insert into location_p values (1,'16/09/2022','bouda','16/09/2022','19/9/2022');
insert into location_p values (4,'16/09/2022','kaboura','17/09/2022','20/9/2022');
insert into location_p values (4,'18/09/2022','patata','18/09/2022','21/9/2022');
insert into location_p values (4,'14/09/2022','nos','14/09/2022','23/9/2022');
insert into location_p values (1,'13/09/2022','pika','13/09/2022','30/9/2022');
insert into location_p values (1,'17/09/2022','tchou','17/09/2022','23/9/2022');
insert into location_p values (2,'27/09/2022','dren','27/09/2022','28/9/2022');
select * from location_p;
select * from client_p;
select * from exemplaire;
select * from film;
select * from individu;
/************************************************************************************/
/*   Question  1 */
/*Cette fonction  récupere le nombre de films réalisés par un réalisateur spécifique*/
CREATE  or replace function nbreFilms(num_realisateur number) 
 return number 
as
   nbre_films number;
BEGIN
    select count(*) into nbre_films
    from  film 
    where realisateur = num_realisateur;
    return nbre_films;
END nbreFilms;

       set serveroutput on;
    declare
    num_realisateur  number:=&num_realisateur;
     begin 
     Dbms_output.put_line('votre realisateur a  ' ||nbreFilms (num_realisateur)|| ' films');
     end ; 
 /*  Question   2:*/
 /*a)*/
CREATE TABLE tableBonus(
    login VARCHAR(20),
    bonus NUMBER(8,2), 
    nbrExLoues NUMBER(8), 
    CONSTRAINT fk_nbrfefilm FOREIGN KEY(login )REFERENCES client_p(login)); 
   
   /*b)*/
    insert into tableBonus(login ,nbrExLoues) 
    select client_p.login, count(numexemplaire)
    from location_p,client_p 
    where (client_p.login = location_p.login) and (to_char(location_p.datelocation,'yyyy')='2022')   
    group by client_p.login;

    select * from tableBonus;

/*c)*/ 
/*cette procédure mettre à jour la colonne bonus de la table tableBonus en fonction de la colonne nbrExLoues pour chaque ligne. Vous pouvez appeler cette procédure en transmettant deux paramètres entiers n1 et n2. La procédure mettra à jour la colonne bonus pour chaque ligne de tableBonus en fonction des valeurs de n1 et n2.*/
create or replace procedure  affecter_bonus( n1 int,n2 int )is 
    cursor c_bonus is select login,nbrExLoues from tableBonus ; 
    v_login tableBonus.login%type; 
    v_nbrexloues tableBonus.nbrexloues%type; 
begin 
    open c_bonus ; 
    loop 
        fetch c_bonus into v_login,v_nbrexloues; 
        exit when c_bonus%notfound  ; 
        if (0 < v_nbrExLoues) and (v_nbrExLoues < n1) then  
            update tableBonus
            set bonus = 0.1
            where login = v_login; 
        elsif (n1 <= v_nbrExLoues)and( v_nbrExLoues< n2) then 
            update tableBonus
            set bonus = 0.2 
            where login = v_login; 
        elsif n2 <= v_nbrExLoues then 
            update tableBonus
            set  bonus  = 0.4 
            where   login  = v_login; 
        elsif v_nbrExLoues=0  	 then 
            update tableBonus
            set  bonus  = 0
            where   login  = v_login; 
        end if  ; 
    end loop ;
    close c_bonus; 
       end affecter_bonus ;

 set serveroutput on;
    declare
    n1 number:=&n1;
    n2 number:=&n2;
     begin 
     affecter_bonus(n1,n2);
     end ; 

select * from tablebonus;
/*d*/ 
  select nomclient,prenomclient,bonus from client_p join tablebonus using(login);  
 /*Question  3*/
 /*a)*/
 /*Cette fonction calcule la valeur de pourcentage basée sur deux valeurs entières*/
CREATE OR REPLACE FUNCTION  Pourcentage(n1 int,n2 int )return number as x number ;  
    BEGIN
    x := (n1 / n2)*100;  
    x:= round ( x, 2)  ;  
    return x;
END  Pourcentage;
 set serveroutput on;
    declare
    n1 number:=&n1;
    n2 number:=&n2;
     begin 
     Pourcentage(n1,n2);
     end ; 
     
/*b)*/
/* Cette fonction permet d'obtenir le nombre d’exemplaires d’un film avec un support de code donné. Vous pouvez appeler cette fonction en passant deux paramètres, un entier n et une chaîne c, et elle retournera le nombre d’exemplaires sous forme de nombre. Si la chaîne 'ANY' est passée comme deuxième paramètre, la fonction retournera le nombre total d’exemplaires pour le film, quel que soit le support du code.*/
create or replace function nbrExSupport(n number , c varchar2) return  number as res number;  
    any_exception exception; 
begin  
    select  count(*) into  res from  exemplaire where numfilm =  n and  codesupport =  upper(c) ; 
    begin 
        if( upper (c) = 'ANY' )then 
            raise any_exception; 
        end if;  
        exception when any_exception then 
        select count(*) into res from exemplaire where numfilm= n;  
    end; 
    return res; 
end nbrExSupport;

set serveroutput on;
    declare
    n number:=&n;
    c varchar:=&c;
     begin 
     Dbms_output.put_line('le film a   ' ||nbrExSupport(n)|| 'et'||nbrExSupport (c));
     end ; 
     /*c)*/ 
create table statistique  (
numFilm number(8) primary key references film(numfilm),
nbrEx int, 
pctgeDVD real,
pctgeVHS real);

/*d)*/
/* procédure qui remplit la table statistique avec des données sur le nombre d’exemplaires disponibles pour chaque film dans la table film */
create or replace procedure remplir_stat
AS
nbr number;
 nb_dvd  number;
 nb_vhs  number;
CURSOR cr is select numfilm from film;
l cr%ROWTYPE;
begin
    for l in cr loop
       nbr := NBREXSUPPORT(l.NUMFILM,'ANY');
        if (nbr=0) then
            nb_dvd:=0;
            nb_vhs:=0;
        else
        nb_dvd:=Pourcentage(NBREXSUPPORT(l.NUMFILM,'dts'),nbr);
             nb_vhs:=Pourcentage(NBREXSUPPORT(l.NUMFILM,'dts'),nbr);
        end if;
        insert into  statistique values (l.NUMFILM,nbr,nb_dvd, nb_vhs);
    end loop;
end remplir_stat;

set serveroutput on;
    declare
     begin 
      Dbms_output.put_line('la table stat a   ' ||remplir_stat());
     end ;

/*Question 4  
 a) */
/* create or replace package body statistics is 
    function non_exemplaire return number is 
        x int;
    begin  
        select count(numfilm) into x
        from film   
        where numfilm not in(select numfilm from exemplaire); 
        return x; 
    end non_exemplaire;  
 
 function no_problem return number is 
        pource number; 
        x number; 
        y number; 
    begin 
        select count(*)into x 
        from exemplaire 
        where upper(probleme)='FALSE';
        select count(*) into y 
        from  exemplaire;
        pource := pourcentage(x,y);  
        return pource  ;  
    end no_problem ; 
 

 
/* b)*/
create or replace PACKAGE STATISTICS as 
    function non_exemplaire return number;  
    function no_problem return number; 
END STATISTICS;
create or replace package body statistics is 
/* fonction qui calcule le nombre de films qui n’ont pas d’exemplaire*/
    function non_exemplaire return number is 
        x int;
    begin  
        select count(numfilm) into x
        from film   
        where numfilm not in(select numfilm from exemplaire); 
        return x; 
    end non_exemplaire;  
/* fonction calcule le pourcentage d’exemplaires où l’attribut probleme est défini sur false dans la table exemplaire.*/
    function no_problem return number is 
        pource number; 
        x number; 
        y number; 
    begin 
        select count(*)into x 
        from exemplaire 
        where upper(probleme)='FALSE';
        select count(*) into y 
        from  exemplaire;
        pource := pourcentage(x,y);  
        return pource  ;  
    end no_problem ; 
end statistics ; 

/* 5) */

CREATE TABLE trace(numLog int primary key,message varchar(1000));

/*fonction renvoie le nombre de lignes de la table trace */
CREATE OR REPLACE FUNCTION nbValLog RETURN INTEGER AS
nbval INTEGER;
BEGIN
SELECT COUNT(*) INTO nbval FROM TRACE;
RETURN nbval;
END;
set serveroutput on;
 begin 
 Dbms_output.put_line(nbValLog);
end;

CREATE TRIGGER TRIG_1
BEFORE INSERT ON location_p
FOR EACH ROW
BEGIN
INSERT INTO trace
VALUES(nbValLog+1,'Trigger 1');
END;

select * from trace;
select * from location_p;
CREATE TRIGGER TRIG_2
BEFORE INSERT ON LOCATION_p
BEGIN
INSERT INTO TRACE
VALUES(nbValLog+1,'Trigger 2');
END;
select *from trace;
CREATE TRIGGER TRIG_3
AFTER INSERT ON LOCATION_p
FOR EACH ROW
BEGIN
INSERT INTO TRACE
VALUES(nbValLog+1,'Trigger 3');
END;
CREATE TRIGGER TRIG_4
AFTER INSERT ON LOCATION_p
BEGIN
INSERT INTO TRACE
VALUES(nbValLog+1,'Trigger 4');
END;
/*
lors de l'insertion dans la table location et apres l'execution d'une requete select de la table trace 
en remarque que le champs de la table on ete remplis par les trigger dans l'ordre suivant 
2 ,1, 3,4 .
cela indique que l'execution des trigger qui admet l'attribut "before" on la privelege par rapport 
les triiger avec attribut "after" puisque l'ordre d'activation d'un declecheur : 1)Les déclencheurs BEFORE
2)Les déclencheurs AFTER
*/
/*6)*/  
/*on va creé une fonction qui verifie si l'utilisateur courant a le privillage de delete. si oui la fonction return 1 si non elle return 0 */
create or replace function priv return number as
    x number := 0; 
    cursor c_role is select PRIVILEGE 
    FROM USER_SYS_PRIVS
    WHERE USERNAME = (select USERNAME from USER_SYS_PRIVS );
    v_role user_sys_privs.PRIVILEGE%type; 
begin  
    open c_role; 
    loop 
        fetch c_role into v_role; 
        exit when c_role%notfound; 
        if(v_role ='DELETE_CATALOG_ROLE')then  
            x := 1; 
        end if; 
    end loop ; 
    close c_role; 
return x; 
end priv;
create or replace trigger deny_delete 
before delete on location_p   
begin 
    if priv() = 0 then  
     raise_application_error(-20556,'Attention !!''user not privilege!!!!!');
     end if;
end ;
/*7)*/
  
create or replace trigger lmd_trigger 
before delete or update or insert on location_p   
for each row 
begin 
    if :old.dateenvoi is not null then    
        if deleting then 
            raise_application_error(-20556,'supression impossible pour une ligne qui contient une date denvoi pour l"exemplaire !!' );
        end if ; 
    elsif :new.dateretour is not null and :new.dateenvoi is  null then
        if inserting then
            raise_application_error (-20557, ' insertion impossible une location dont on connaît la date de retour et dont on ignore la date d’envoi !!' );
        elsif updating then
            raise_application_error (-20557, 'insertion impossible une location dont on connaît la date de retour et dont on ignore la date d’envoi !!' );
        end if; 
    else 
        if deleting then
            dbms_output.put_line( ' vous avez  effectuer  une suppression : les details   de la supression  sont  '||' '|| :old.NUMEXEMPLAIRE || ' '|| :old.DATELOCATION ||' '|| :old.login||' '|| :old.DATERETOUR ||' '||:old.DATEENVOI)   ;  
        elsif inserting then
            dbms_output.put_line( 'vous avez  effectuer  une insertion : les details   de l"insertion sont  '||:new.NUMEXEMPLAIRE ||' '|| :new.DATELOCATION ||' '|| :new.login||' '|| :new.DATERETOUR ||' '|| :new.DATEENVOI) ; 
        elsif updating then 
            if updating ('numexemplaire') then
                dbms_output.put_line( 'les details   de la mise   à  jour  sont:   '||'les  anciennes  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI ) ;  
                dbms_output.put_line( 'les  nouvelles  valeurs sont  : '||' '||:new.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI) ; 
            elsif updating ('datelocation') then
                dbms_output.put_line( 'les details   de la mise   à  jour  sont:   '||'les  anciennes  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI ) ;  
                dbms_output.put_line( 'les  nouvelles  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:new.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI) ; 
            elsif updating ('login') then
                dbms_output.put_line( 'les details   de la mise   à  jour  sont:   '||'les  anciennes  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI ) ;  
                dbms_output.put_line( 'les  nouvelles  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:new.LOGIN||' '||:old.DATERETOUR ||' '||:old.DATEENVOI) ;
            elsif updating ('dateretour') then
                dbms_output.put_line( 'les details   de la mise   à  jour  sont:   '||'les  anciennes  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI ) ;  
                dbms_output.put_line( 'les  nouvelles  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.LOGIN||' '||:new.DATERETOUR ||' '||:old.DATEENVOI) ;
            elsif updating ('dateenvoi') then
                dbms_output.put_line( 'les details   de la mise   à  jour  sont:   '||'les  anciennes  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:old.DATEENVOI ) ;  
                dbms_output.put_line( 'les  nouvelles  valeurs sont  : '||' '||:old.NUMEXEMPLAIRE ||' '||:old.DATELOCATION ||' '||:old.login||' '||:old.DATERETOUR ||' '||:new.DATEENVOI);
            end if  ; 
        end if ; 
    end if ;      
end ;
/*8)*/
/*a)*/
CREATE OR REPLACE TRIGGER trigBonus 
AFTER INSERT ON LOCATION_p 
FOR EACH ROW 
DECLARE 
nbre TABLEBONUS.nbrExLoues%type; 
BEGIN 
SELECT COUNT(*) INTO nbre FROM LOCATION_p 
WHERE login = :NEW.login; 
UPDATE TABLEBONUS
SET nbrExLoues = nbre+1 WHERE login = :NEW.login;
END; 
/*
le phenomene s'appel : boucle infini
*/
/*b)*/
/* package  triggerspackage qui contient une variable login1 de même type que login de la table location_p dans le schéma tablebonus*/
create or replace package triggerspackage is   
    login1 tablebonus.login%type;
end ; 
/*ces déclencheurs mettent à jour automatiquement la table "tablebonus" en fonction des nouvelles données ajoutées à la table location_p*/
/*mise à jour avec la valeur de la colonne login de la nouvelle ligne insérée après insertion de chaque ligne dans la table location_p*/
create or replace trigger trg1  
AFTER INSERT ON location_p
for each row
begin 
    triggerspackage.login1 := :NEW.login;
end ;
/*mettre à jour nbrExLoues de la table tablebonus pour le login*/
/* sélectionne le nombre de lignes de la table location_p qui ont le même login que celui stocké dans la variable login1 du package */
create or replace trigger trg2 
AFTER INSERT ON location_p
declare  
    nbre TABLEBONUS.nbrExLoues%type;
begin 
    SELECT COUNT(*) INTO nbre 
    FROM location_p
    WHERE login = triggerspackage.login1;
    UPDATE tablebonus
    /*ajoutant 1 au nombre actuel de location*/
    SET nbrExLoues = nbre+1 
    WHERE login = triggerspackage.login1;
end;


